name: Process transactions 1st of Month

on:
  schedule:
    - cron: "0 10 1 * *" # Runs at 10 am (UTC) on the 1st day of each month
  workflow_dispatch: # Allows manual triggering of the workflow
    inputs:
      flags:
        description: "Application flags"
        required: false
        default: ""

jobs:
  run-monthly-task:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Create .env file
        run: |
          echo '
          FIO_TOKEN=${{ secrets.FIO_TOKEN }}
          GOOGLE_SHEET_ID_PROD=${{ secrets.GOOGLE_SHEET_ID_PROD }}
          OPENAI_TOKEN=${{ secrets.OPENAI_TOKEN }}
          OPENAI_MODEL_PROD=${{ secrets.OPENAI_MODEL_PROD }}
          OPENAI_MODEL_DEV=${{ secrets.OPENAI_MODEL_DEV }}
          GOOGLE_SHEET_ID_DEV=${{ secrets.GOOGLE_SHEET_ID_DEV }}
          EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }}
          EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
          EMAIL_TRANSACTIONS_TARGET=${{ secrets.EMAIL_TRANSACTIONS_TARGET }}
          EMAIL_IMAP_PORT=${{ secrets.EMAIL_IMAP_PORT }}
          EMAIL_IMAP_SERVER=${{ secrets.EMAIL_IMAP_SERVER }}
          WHITELISTED_ACCOUNTS=${{ secrets.WHITELISTED_ACCOUNTS }}
          WHITELISTED_INVESTMENT_KEYWORDS=${{ secrets.WHITELISTED_INVESTMENT_KEYWORDS }}
          AIR_ATTACHMENT_PASSWORD=${{ secrets.AIR_ATTACHMENT_PASSWORD }}' >> .env

      - name: Create service-account.json file
        run: |
          echo '{
            "type": "service_account",
            "project_id": ${{ secrets.GOOGLE_PROJECT_ID }},
            "private_key_id": ${{ secrets.GOOGLE_PRIVATE_KEY_ID }},
            "private_key": ${{ secrets.GOOGLE_PRIVATE_KEY }},
            "client_email": ${{ secrets.GOOGLE_CLIENT_EMAIL }},
            "client_id": ${{ secrets.GOOGLE_CLIENT_ID }},
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
            "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/dzo-finance-management-tech-us%40serious-amulet-449806-v7.iam.gserviceaccount.com",
            "universe_domain": "googleapis.com"
          }' > service-account.json

      - name: Create Attachment folder
        run: mkdir ./src/attachments

      - name: Create Expenses prompt file
        run: |
          cat <<EOF > ./src/static/prompts/expenses.txt
          {{secrets.EXPENSES_PROMPT}}
          EOF

      - name: Create Incomes prompt file
        run: |
          cat <<EOF > ./src/static/prompts/incomes.txt
          {{secrets.INCOMES_PROMPT}}
          EOF

      - name: Install dependencies
        run: yarn install

      - name: Build project
        run: yarn build

      - name: Run application
        run: |
          if [ "${{ github.event.inputs.flags }}" == "" ]; then
            yarn start:prod
          else
            yarn start ${{ github.event.inputs.flags }}
          fi

      - name: Replace GitHub placeholders in email body
        if: success()
        run: |
          if [ -f "email-body.txt" ]; then
            echo "üìù Replacing GitHub placeholders..."
            echo "Repository: ${{ github.repository }}"
            echo "Workflow: ${{ github.workflow }}"
            echo "Run ID: ${{ github.run_id }}"
            
            # Use more robust sed with proper escaping
            sed -i "s|{{GITHUB_REPOSITORY}}|${{ github.repository }}|g" email-body.txt
            sed -i "s|{{GITHUB_WORKFLOW}}|${{ github.workflow }}|g" email-body.txt
            sed -i "s|{{GITHUB_RUN_ID}}|${{ github.run_id }}|g" email-body.txt
            sed -i "s|{{GITHUB_RUN_URL}}|${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|g" email-body.txt
            
            echo "‚úÖ Placeholders replaced successfully"
          else
            echo "‚ùå email-body.txt not found"
          fi

      - name: Read email body content
        id: email-body
        if: success()
        run: |
          if [ -f "email-body.txt" ]; then
            EMAIL_BODY=$(cat email-body.txt)
            echo "content<<EOF" >> $GITHUB_OUTPUT
            echo "$EMAIL_BODY" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "content=No summary available." >> $GITHUB_OUTPUT
          fi

      - name: Send email notification
        uses: dawidd6/action-send-mail@v5
        if: success() # Only run this step if the workflow succeeds
        with:
          server_address: ${{ secrets.EMAIL_SMTP_SERVER }}
          server_port: ${{ secrets.EMAIL_SMTP_PORT }}
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          to: ${{ secrets.EMAIL_USERNAME_CI_NOTIFICATION }}
          subject: "Money well spent üí∞"
          from: ${{ secrets.EMAIL_USERNAME }}
          html_body: ${{ steps.email-body.outputs.content }}
